//------------------------------------------------------------------------------
// <auto-generated>
// </auto-generated>
//------------------------------------------------------------------------------




using System.Data.Entity.ModelConfiguration;
using System.Runtime.Serialization;
using Core.Entities;

namespace DataAccess.UserModule.UnitOfWork.Mapping
{
    using System;
    using System.Collections.Generic;
    
    public partial class BaseFieldMapping:EntityTypeConfiguration<Core.Entities.SQL.User.BaseField>
    {
        
        public BaseFieldMapping()
        {
                // Primary Key
                this.HasKey(t => t.Id);
    
    
                // Properties
     
                    this.Property(t => t.Name).IsRequired()
    .HasMaxLength(2000);
    
    
     
                    this.Property(t => t.Description).HasMaxLength(2000);
    
    
     
                    this.Property(t => t.ClientValidationClass).HasMaxLength(2000);
    
    
     
                    this.Property(t => t.ServerRegex).HasMaxLength(2000);
    
    
     
                    this.Property(t => t.HtmlData).HasMaxLength(2000);
    
    
    
                this.ToTable("BaseField","Req");
        this.Property(t => t.Id).HasColumnName("Id");
        this.Property(t => t.Name).HasColumnName("Name");
        this.Property(t => t.Description).HasColumnName("Description");
        this.Property(t => t.DataType).HasColumnName("DataType");
        this.Property(t => t.ClientValidationClass).HasColumnName("ClientValidationClass");
        this.Property(t => t.ServerRegex).HasColumnName("ServerRegex");
        this.Property(t => t.ListId).HasColumnName("ListId");
        this.Property(t => t.IsMail).HasColumnName("IsMail");
        this.Property(t => t.IsCallNumber).HasColumnName("IsCallNumber");
        this.Property(t => t.HtmlData).HasColumnName("HtmlData");
        this.Property(t => t.IsUniqueForUser).HasColumnName("IsUniqueForUser");
        this.Property(t => t.ApplicantNumber).HasColumnName("ApplicantNumber");
    
                // Relationships
                this.HasOptional(t => t.BaseDataList)
                    .WithMany(t => t.BaseField)
                    .HasForeignKey(d => d.ListId);
    
    
    
        }
    
        
        
        
        
        
        
        
        
        
        
        
        
    
        
        
        
    }
}
